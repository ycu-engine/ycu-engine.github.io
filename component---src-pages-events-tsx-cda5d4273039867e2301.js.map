{"version":3,"sources":["webpack://ore-ore-gatsbyjs-template/./src/components/organisms/SEO.tsx","webpack://ore-ore-gatsbyjs-template/./src/pages/events.tsx"],"names":["SEO","title","image","lang","description","keywords","site","useStaticQuery","pathname","useLocation","seo","useMemo","siteMetadata","defaultDescription","siteUrl","defaultImage","Math","random","toFixed","url","concat","filter","v","titleTemplate","undefined","name","content","join","property","twitterUsername","data","className","allFile","nodes","map","file","key","id","Link","to","childMdx","frontmatter","endAt","excerpt","split"],"mappings":"uNAeO,MAAMA,EAAM,EACjBC,QACAC,QACAC,OACAC,cACAC,eAC4B,IAAD,IAC3B,MAAM,KAAEC,IAASC,oBAAc,eAezB,SAAEC,IAAaC,mBAEfC,GAAMC,cACV,2BAAO,CACLV,MAAOA,EACPG,YAAaA,IAAeE,SAAJ,UAAIA,EAAMM,oBAAV,aAAI,EAAoBC,oBAChDX,MAAM,IAAII,SAAL,UAAKA,EAAMM,oBAAX,aAAK,EAAoBE,UAC5BZ,IAASI,SAAJ,UAAIA,EAAMM,oBAAV,aAAI,EAAoBG,eAD1B,IAEDC,KAAKC,SAASC,QAAQ,GAC1Bf,KAAMA,GAAQ,KACdgB,IAAI,IAAIb,SAAL,UAAKA,EAAMM,oBAAX,aAAK,EAAoBE,SAAUN,EACtCH,WAAWC,SAAA,UAAAA,EAAMM,oBAAN,eAAoBP,WAAY,IAAIe,QAC7Cf,SAAA,UAAAA,EAAUgB,cAAV,oBAAAhB,GAAoBiB,KAAqBA,MAAM,IATnD,GAYA,CAAChB,EAAML,EAAOG,EAAaF,EAAOC,EAAME,EAAUG,IAEpD,OACE,gBAAC,IAAD,CAAQe,eAAejB,SAAA,UAAAA,EAAMM,oBAAN,eAAoBW,qBAAiBC,GAC1D,6BAAQd,EAAIT,OACZ,wBAAME,KAAMO,EAAIP,OAChB,wBAAMsB,KAAK,cAAcC,QAAShB,EAAIN,kBAAeoB,IACrD,wBAAMC,KAAK,QAAQC,QAAShB,EAAIR,QAChC,wBAAMuB,KAAK,WAAWC,QAAShB,EAAIL,SAASsB,KAAK,OACjD,wBAAMC,SAAS,SAASF,QAAShB,EAAIS,MACrC,wBAAMS,SAAS,UAAUF,QAAQ,YACjC,wBAAME,SAAS,WAAWF,QAAShB,EAAIT,YAASuB,IAChD,wBAAMI,SAAS,iBAAiBF,QAAShB,EAAIN,kBAAeoB,IAC5D,wBAAMI,SAAS,WAAWF,QAAShB,EAAIR,QACvC,wBAAMuB,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,eACLC,SAASpB,SAAA,UAAAA,EAAMM,oBAAN,eAAoBiB,uBAAmBL,IAElD,wBAAMC,KAAK,gBAAgBC,QAAShB,EAAIT,YAASuB,IACjD,wBAAMC,KAAK,sBAAsBC,QAAShB,EAAIN,kBAAeoB,IAC7D,wBAAMC,KAAK,gBAAgBC,QAAShB,EAAIR,QAnB5C,C,6ECqBF,UA1CmB,EAAG4B,UAElB,gCACE,gBAAC,IAAD,CAAK7B,MAAM,SACX,2BACE,uBAAK8B,UAAU,OACb,sBAAIA,UAAU,iBAAd,QACA,0BACGD,EAAKE,QAAQC,MAAMC,KAAKC,IAAD,uBACtB,sBAAIC,IAAKD,EAAKE,IACZ,sBAAIN,UAAU,gBACZ,gBAAC,EAAAO,KAAD,CAAMC,GAAE,WAAaJ,EAAKV,MAA1B,UACGU,EAAKK,gBADR,iBACG,EAAeC,mBADlB,aACG,EAA4BxC,QAIhC,UAAAkC,EAAKK,gBAAL,mBAAeC,mBAAf,SAA4BC,MAC3B,sBAAIX,UAAU,gBAAd,UACGI,EAAKK,gBADR,aACG,EAAeC,YAAYC,MAD9B,OAGE,KAEH,UAAAP,EAAKK,gBAAL,SAAeG,QACd,yBACGR,EAAKK,SAASG,QAAQC,MAAM,MAAMV,KAAKZ,GACtC,gCACGA,EACD,+BAIJ,KACJ,sBAAIS,UAAU,oBAxBM,O","file":"component---src-pages-events-tsx-cda5d4273039867e2301.js","sourcesContent":["import { SeoQuery } from '@gql'\nimport { useLocation } from '@reach/router'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { useMemo } from 'react'\nimport { Helmet } from 'react-helmet'\n\ntype SEOProps = {\n  title: string\n  description?: string\n  lang?: string\n  image?: string\n  keywords?: (string | undefined | null)[] | undefined | null\n}\n\nexport const SEO = ({\n  title,\n  image,\n  lang,\n  description,\n  keywords,\n}: SEOProps): JSX.Element => {\n  const { site } = useStaticQuery<SeoQuery>(graphql`\n    query SEO {\n      site {\n        siteMetadata {\n          defaultTitle: title\n          titleTemplate\n          defaultDescription: description\n          siteUrl: url\n          defaultImage: image\n          twitterUsername\n          keywords\n        }\n      }\n    }\n  `)\n  const { pathname } = useLocation()\n\n  const seo = useMemo(\n    () => ({\n      title: title,\n      description: description || site?.siteMetadata?.defaultDescription,\n      image: `${site?.siteMetadata?.siteUrl}${\n        image || site?.siteMetadata?.defaultImage\n      }?${Math.random().toFixed(5)}`,\n      lang: lang || 'ja',\n      url: `${site?.siteMetadata?.siteUrl}${pathname}`,\n      keywords: (site?.siteMetadata?.keywords || []).concat(\n        keywords?.filter?.((v): v is string => !!v) || []\n      ),\n    }),\n    [site, title, description, image, lang, keywords, pathname]\n  )\n  return (\n    <Helmet titleTemplate={site?.siteMetadata?.titleTemplate || undefined}>\n      <title>{seo.title}</title>\n      <html lang={seo.lang} />\n      <meta name=\"description\" content={seo.description || undefined} />\n      <meta name=\"image\" content={seo.image} />\n      <meta name=\"keywords\" content={seo.keywords.join(',')} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:type\" content=\"article\" />\n      <meta property=\"og:title\" content={seo.title || undefined} />\n      <meta property=\"og:description\" content={seo.description || undefined} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:site\"\n        content={site?.siteMetadata?.twitterUsername || undefined}\n      />\n      <meta name=\"twitter:title\" content={seo.title || undefined} />\n      <meta name=\"twitter:description\" content={seo.description || undefined} />\n      <meta name=\"twitter:image\" content={seo.image} />\n    </Helmet>\n  )\n}\n","import { SEO } from '@/components/organisms/SEO'\nimport { EventsPageQuery } from '@gql'\nimport { graphql, Link } from 'gatsby'\nimport * as React from 'react'\n\nexport const pageQuery = graphql`\n  query EventsPage {\n    allFile(\n      filter: {\n        sourceInstanceName: { eq: \"events\" }\n        childrenMdx: { elemMatch: { frontmatter: { private: { ne: true } } } }\n      }\n      sort: { fields: childrenMdx___frontmatter___createdAt, order: DESC }\n    ) {\n      nodes {\n        id\n        name\n        childMdx {\n          excerpt(truncate: true, pruneLength: 80)\n          frontmatter {\n            title\n            endAt(fromNow: true, locale: \"ja\")\n          }\n        }\n      }\n    }\n  }\n`\n\ninterface EventsPageProps {\n  data: EventsPageQuery\n}\n\nconst EventsPage = ({ data }: EventsPageProps): JSX.Element => {\n  return (\n    <>\n      <SEO title=\"イベント\" />\n      <div>\n        <div className=\"p-5\">\n          <h1 className=\"text-2xl mb-4\">イベント</h1>\n          <ul>\n            {data.allFile.nodes.map((file) => (\n              <li key={file.id}>\n                <h2 className=\"text-xl mb-3\">\n                  <Link to={`/events/${file.name}`}>\n                    {file.childMdx?.frontmatter?.title}\n                  </Link>\n                </h2>\n\n                {file.childMdx?.frontmatter?.endAt ? (\n                  <h3 className=\"text-lg mb-2\">\n                    {file.childMdx?.frontmatter.endAt}に終了\n                  </h3>\n                ) : null}\n\n                {file.childMdx?.excerpt ? (\n                  <p>\n                    {file.childMdx.excerpt.split('\\n').map((v) => (\n                      <>\n                        {v}\n                        <br />\n                      </>\n                    ))}\n                  </p>\n                ) : null}\n                <hr className=\"my-4 border-t-2\" />\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default EventsPage\n"],"sourceRoot":""}