{"version":3,"sources":["webpack://ore-ore-gatsbyjs-template/./src/components/atoms/member-icon.tsx","webpack://ore-ore-gatsbyjs-template/./src/components/atoms/team-icon.tsx","webpack://ore-ore-gatsbyjs-template/./src/components/organisms/SEO.tsx","webpack://ore-ore-gatsbyjs-template/./src/lib/size.ts","webpack://ore-ore-gatsbyjs-template/./src/components/atoms/page-header.tsx","webpack://ore-ore-gatsbyjs-template/./src/components/molecules/MemberCard.tsx","webpack://ore-ore-gatsbyjs-template/./src/components/organisms/Tab.tsx","webpack://ore-ore-gatsbyjs-template/./src/pages/members.tsx"],"names":["MemberIcon","memberName","size","props","files","useStaticQuery","fixedImage","React","membersOne","allFile","nodes","find","node","name","defaultImage","Error","image","Link","to","file","alt","width","SIZE","height","TeamIcon","teamName","className","svg","svgs","images","nonNullImage","SEO","title","lang","description","keywords","site","pathname","useLocation","seo","useMemo","siteMetadata","defaultDescription","siteUrl","Math","random","toFixed","url","concat","filter","v","titleTemplate","undefined","content","join","property","twitterUsername","xxs","xs","sm","md","lg","xl","PageHeader","pageName","childImageSharp","gatsbyImageData","MemberCard","member","nameJa","teams","map","team","key","id","Tab","tabs","items","children","selectedTab","setSelectedTab","tab","onClick","style","minHeight","item","i","data","現役","activeMemvers","OB","graduatedMembers"],"mappings":"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","file":"component---src-pages-members-tsx-2ced5cc04c6e77cbac85.js","sourcesContent":["import { MemberName } from '@/data/member'\nimport { SIZE, SIZE_TYPE } from '@/lib/size'\nimport type { MemberIconQuery } from '@gql'\nimport { graphql, Link, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { ImageWrapper } from './image-wrapper'\n\ntype MemberIconProps = {\n  memberName: MemberName\n  size: SIZE_TYPE\n  className?: string\n}\n\nexport const MemberIcon: React.FC<MemberIconProps> = ({\n  memberName,\n  size,\n  ...props\n}) => {\n  const files = useStaticQuery<MemberIconQuery>(graphql`\n    query MemberIcon {\n      allFile(filter: { relativeDirectory: { eq: \"member-images\" } }) {\n        nodes {\n          name\n          xxs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 16, width: 16)\n          }\n          xs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 24, width: 24)\n          }\n          sm: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 32, width: 32)\n          }\n          md: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 48, width: 48)\n          }\n          lg: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 64, width: 64)\n          }\n          xl: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 128, width: 128)\n          }\n        }\n      }\n    }\n  `)\n  const fixedImage = React.useMemo(() => {\n    const membersOne = files.allFile.nodes.find(\n      (node) => node.name === memberName\n    )\n    if (membersOne) return membersOne\n    const defaultImage = files.allFile.nodes.find(\n      (node) => node.name === 'default'\n    )\n    if (defaultImage) return defaultImage\n    throw Error('Default Image not found')\n  }, [memberName, files])\n  const image = React.useMemo(() => {\n    const image = fixedImage[size]\n    if (!image) throw Error(\"Image can't resolved\")\n    return image\n  }, [fixedImage, size])\n\n  return (\n    <Link to={`/members/${memberName}`}>\n      <ImageWrapper\n        {...props}\n        file={image}\n        alt={`${memberName}のアイコン`}\n        width={SIZE[size]}\n        height={SIZE[size]}\n      />\n    </Link>\n  )\n}\n","import { TeamName } from '@/data/team'\nimport { SIZE, SIZE_TYPE } from '@/lib/size'\nimport type { TeamIconQuery } from '@gql'\nimport { graphql, Link, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { ImageWrapper } from './image-wrapper'\n\ntype TeamIconProps = {\n  teamName: TeamName\n  size: SIZE_TYPE\n  className?: string\n}\n\nexport const TeamIcon: React.FC<TeamIconProps> = ({\n  teamName,\n  size,\n  className,\n  ...props\n}) => {\n  const files = useStaticQuery<TeamIconQuery>(graphql`\n    query TeamIcon {\n      svgs: allFile(\n        filter: {\n          relativeDirectory: { eq: \"team-images\" }\n          extension: { in: [\"svg\"] }\n        }\n      ) {\n        nodes {\n          name\n          publicURL\n        }\n      }\n      images: allFile(\n        filter: {\n          relativeDirectory: { eq: \"team-images\" }\n          extension: { nin: [\"svg\"] }\n        }\n      ) {\n        nodes {\n          name\n          xxs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 16, width: 16)\n          }\n          xs: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 24, width: 24)\n          }\n          sm: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 32, width: 32)\n          }\n          md: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 48, width: 48)\n          }\n          lg: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 64, width: 64)\n          }\n          xl: childImageSharp {\n            gatsbyImageData(layout: FIXED, height: 128, width: 128)\n          }\n        }\n      }\n    }\n  `)\n\n  const image = React.useMemo(() => {\n    const svg = files.svgs.nodes.find((node) => node.name === teamName)\n    if (svg) return svg\n    const image = files.images.nodes.find((node) => node.name === teamName)\n    if (image) return image[size]\n    const defaultImage = files.images.nodes.find(\n      (node) => node.name === 'default'\n    )\n    if (defaultImage) return defaultImage[size]\n    throw Error('Default Image not found')\n  }, [teamName, files, size])\n\n  const nonNullImage = React.useMemo(() => {\n    if (image) return image\n    throw Error(`image is ${image}`)\n  }, [image])\n\n  return (\n    <Link to={`/teams/${teamName}`} className={className}>\n      <ImageWrapper\n        {...props}\n        file={nonNullImage}\n        alt={`${teamName}のアイコン`}\n        width={SIZE[size]}\n        height={SIZE[size]}\n      />\n    </Link>\n  )\n}\n","import { SeoQuery } from '@gql'\nimport { useLocation } from '@reach/router'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { useMemo } from 'react'\nimport { Helmet } from 'react-helmet'\n\ntype SEOProps = {\n  title: string\n  description?: string\n  lang?: string\n  image?: string\n  keywords?: (string | undefined | null)[] | undefined | null\n}\n\nexport const SEO = ({\n  title,\n  image,\n  lang,\n  description,\n  keywords,\n}: SEOProps): JSX.Element => {\n  const { site } = useStaticQuery<SeoQuery>(graphql`\n    query SEO {\n      site {\n        siteMetadata {\n          defaultTitle: title\n          titleTemplate\n          defaultDescription: description\n          siteUrl: url\n          defaultImage: image\n          twitterUsername\n          keywords\n        }\n      }\n    }\n  `)\n  const { pathname } = useLocation()\n\n  const seo = useMemo(\n    () => ({\n      title: title,\n      description: description || site?.siteMetadata?.defaultDescription,\n      image: `${site?.siteMetadata?.siteUrl}${\n        image || site?.siteMetadata?.defaultImage\n      }?${Math.random().toFixed(5)}`,\n      lang: lang || 'ja',\n      url: `${site?.siteMetadata?.siteUrl}${pathname}`,\n      keywords: (site?.siteMetadata?.keywords || []).concat(\n        keywords?.filter?.((v): v is string => !!v) || []\n      ),\n    }),\n    [site, title, description, image, lang, keywords, pathname]\n  )\n  return (\n    <Helmet titleTemplate={site?.siteMetadata?.titleTemplate || undefined}>\n      <title>{seo.title}</title>\n      <html lang={seo.lang} />\n      <meta name=\"description\" content={seo.description || undefined} />\n      <meta name=\"image\" content={seo.image} />\n      <meta name=\"keywords\" content={seo.keywords.join(',')} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:type\" content=\"article\" />\n      <meta property=\"og:title\" content={seo.title || undefined} />\n      <meta property=\"og:description\" content={seo.description || undefined} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:site\"\n        content={site?.siteMetadata?.twitterUsername || undefined}\n      />\n      <meta name=\"twitter:title\" content={seo.title || undefined} />\n      <meta name=\"twitter:description\" content={seo.description || undefined} />\n      <meta name=\"twitter:image\" content={seo.image} />\n    </Helmet>\n  )\n}\n","export const SIZE = {\n  xxs: 16,\n  xs: 24,\n  sm: 32,\n  md: 48,\n  lg: 64,\n  xl: 128,\n} as const\n\nexport type SIZE_TYPE = keyof typeof SIZE\n","import type { PageHeaderQuery } from '@gql'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { ImageWrapper } from './image-wrapper'\n\ntype PageHeaderProps = {\n  pageName: 'members'\n  className?: string\n}\n\nexport const PageHeader = ({\n  pageName,\n  ...props\n}: PageHeaderProps): JSX.Element => {\n  const images = useStaticQuery<PageHeaderQuery>(graphql`\n    query PageHeader {\n      allFile(filter: { relativeDirectory: { eq: \"site\" } }) {\n        nodes {\n          childImageSharp {\n            gatsbyImageData(layout: FULL_WIDTH)\n          }\n          name\n        }\n      }\n    }\n  `)\n\n  const image = React.useMemo(() => {\n    const image = images.allFile.nodes.find(\n      (node) => node.name === `${pageName}-header`\n    )\n    if (image?.childImageSharp) {\n      return image.childImageSharp\n    }\n    throw Error(`Image site/${pageName}-header.{png,jpeg...} not found!`)\n  }, [images, pageName])\n\n  return <ImageWrapper {...props} file={image.gatsbyImageData} alt=\"\" />\n}\n","import { MemberName } from '@/data/member'\nimport { TeamName } from '@/data/team'\nimport { MemberInfoFragment } from '@gql'\nimport { Link } from 'gatsby'\nimport * as React from 'react'\nimport { MemberIcon } from '../atoms/member-icon'\nimport { TeamIcon } from '../atoms/team-icon'\n\ntype MemberCardProps = {\n  member: MemberInfoFragment\n}\n\nexport const MemberCard = ({ member }: MemberCardProps): JSX.Element => {\n  return (\n    <div className=\"flex\">\n      <div className=\"flex justify-center items-center p-3\">\n        <MemberIcon\n          className=\"rounded-full\"\n          memberName={member.name as MemberName}\n          size=\"lg\"\n        />\n      </div>\n      <div className=\"flex flex-col p-3 pl-4\">\n        <div className=\"text-lg\">\n          <Link to={`/members/${member.name}`}>{member.nameJa} ▷</Link>\n        </div>\n        <div className=\"flex flex-row\">\n          {member.teams\n            ? member.teams.map((team) => (\n                <TeamIcon\n                  className=\"mr-1\"\n                  key={team.id}\n                  teamName={team.team.name as TeamName}\n                  size=\"sm\"\n                />\n              ))\n            : null}\n        </div>\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\n\ntype TabProps<T extends string, V extends Record<string, unknown>> = {\n  tabs: [T, ...T[]]\n  items: {\n    [key in T]: V[]\n  }\n  children: (item: V, idx: number) => JSX.Element\n}\n\nexport const Tab = <T extends string, V extends Record<string, unknown>>({\n  tabs,\n  items,\n  children,\n}: TabProps<T, V>): JSX.Element => {\n  const [selectedTab, setSelectedTab] = React.useState<T>(tabs[0])\n\n  return (\n    <>\n      <div className=\"flex flex-row\">\n        {tabs.map((tab) => (\n          <button\n            key={tab}\n            className={`flex-grow-0 px-8 py-2 text-lg border rounded-t focus:outline-none hover:bg-accent ${\n              tab === selectedTab ? 'border-b-0' : ''\n            }`}\n            onClick={() => setSelectedTab(tab)}\n          >\n            {tab}\n          </button>\n        ))}\n        <div className=\"flex-grow border-b\" />\n      </div>\n      <div className=\"border border-t-0 rounded-b\" style={{ minHeight: 100 }}>\n        {tabs.map((tab) => (\n          <div\n            key={tab}\n            className={`divide-y-2 ${tab !== selectedTab ? 'hidden' : ''}`}\n          >\n            {items[tab].map((item, i) => children(item, i))}\n          </div>\n        ))}\n      </div>\n    </>\n  )\n}\n","import { PageHeader } from '@/components/atoms/page-header'\nimport { MemberCard } from '@/components/molecules/MemberCard'\nimport { SEO } from '@/components/organisms/SEO'\nimport { Tab } from '@/components/organisms/Tab'\nimport type { MembersPageQuery } from '@gql'\nimport { graphql } from 'gatsby'\nimport Link from 'gatsby-link'\nimport * as React from 'react'\n\nexport const pageQuery = graphql`\n  query MembersPage {\n    activeMemvers: allMember(filter: { isGraduated: { ne: true } }) {\n      nodes {\n        ...memberInfo\n      }\n    }\n    graduatedMembers: allMember(filter: { isGraduated: { eq: true } }) {\n      nodes {\n        ...memberInfo\n      }\n    }\n  }\n\n  fragment memberInfo on Member {\n    name\n    position\n    nameJa\n    id\n    joinedAt\n    belongs {\n      faculty {\n        name\n        nameJa\n        id\n      }\n      grade\n    }\n    skills {\n      level\n      skill {\n        name\n        id\n      }\n      id\n    }\n    teams {\n      id\n      team {\n        name\n        id\n      }\n      leader\n    }\n  }\n`\n\ninterface MembersPageProps {\n  data: MembersPageQuery\n}\n\nconst MembersPage = ({ data }: MembersPageProps): JSX.Element => {\n  return (\n    <>\n      <SEO title={`メンバー`} />\n      <div>\n        <PageHeader pageName=\"members\" />\n        <div className=\"flex flex-col my-5 mx-5\">\n          <h1 className=\"text-center text-3xl\">メンバー一覧</h1>\n          <p className=\"text-base px-8 md:px-16 lg:px-32\">\n            Lorem ipsum, dolor sit amet consectetur adipisicing elit.\n            Consequatur quod eveniet repellendus delectus doloribus excepturi\n            recusandae, provident porro modi adipisci facilis reiciendis\n            accusamus tempore, quisquam cumque magni ea. Aliquam, debitis.\n          </p>\n        </div>\n\n        <div className=\"container px-4 mx-auto\">\n          <Tab\n            tabs={['現役', 'OB']}\n            items={{\n              現役: data.activeMemvers.nodes,\n              OB: data.graduatedMembers.nodes,\n            }}\n          >\n            {(member) => <MemberCard member={member} key={member.id} />}\n          </Tab>\n\n          <Link to=\"/\">Go to Top</Link>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default MembersPage\n"],"sourceRoot":""}