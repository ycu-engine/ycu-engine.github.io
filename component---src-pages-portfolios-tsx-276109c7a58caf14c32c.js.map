{"version":3,"sources":["webpack://ore-ore-gatsbyjs-template/./src/components/organisms/SEO.tsx","webpack://ore-ore-gatsbyjs-template/./src/pages/portfolios.tsx"],"names":["SEO","title","image","lang","description","keywords","site","useStaticQuery","pathname","useLocation","seo","useMemo","siteMetadata","defaultDescription","siteUrl","defaultImage","Math","random","toFixed","url","concat","filter","v","titleTemplate","undefined","name","content","join","property","twitterUsername","data","allPortfolio","nodes","map","portfolio","key","id","nameJa","contributors","contributor","member","to"],"mappings":"sNAeO,MAAMA,EAAM,EACjBC,QACAC,QACAC,OACAC,cACAC,eAC4B,IAAD,IAC3B,MAAM,KAAEC,IAASC,oBAAc,eAezB,SAAEC,IAAaC,mBAEfC,GAAMC,cACV,2BAAO,CACLV,MAAOA,EACPG,YAAaA,IAAeE,SAAJ,UAAIA,EAAMM,oBAAV,aAAI,EAAoBC,oBAChDX,MAAM,IAAII,SAAL,UAAKA,EAAMM,oBAAX,aAAK,EAAoBE,UAC5BZ,IAASI,SAAJ,UAAIA,EAAMM,oBAAV,aAAI,EAAoBG,eAD1B,IAEDC,KAAKC,SAASC,QAAQ,GAC1Bf,KAAMA,GAAQ,KACdgB,IAAI,IAAIb,SAAL,UAAKA,EAAMM,oBAAX,aAAK,EAAoBE,SAAUN,EACtCH,WAAWC,SAAA,UAAAA,EAAMM,oBAAN,eAAoBP,WAAY,IAAIe,QAC7Cf,SAAA,UAAAA,EAAUgB,cAAV,oBAAAhB,GAAoBiB,KAAqBA,MAAM,IATnD,GAYA,CAAChB,EAAML,EAAOG,EAAaF,EAAOC,EAAME,EAAUG,IAEpD,OACE,gBAAC,IAAD,CAAQe,eAAejB,SAAA,UAAAA,EAAMM,oBAAN,eAAoBW,qBAAiBC,GAC1D,6BAAQd,EAAIT,OACZ,wBAAME,KAAMO,EAAIP,OAChB,wBAAMsB,KAAK,cAAcC,QAAShB,EAAIN,kBAAeoB,IACrD,wBAAMC,KAAK,QAAQC,QAAShB,EAAIR,QAChC,wBAAMuB,KAAK,WAAWC,QAAShB,EAAIL,SAASsB,KAAK,OACjD,wBAAMC,SAAS,SAASF,QAAShB,EAAIS,MACrC,wBAAMS,SAAS,UAAUF,QAAQ,YACjC,wBAAME,SAAS,WAAWF,QAAShB,EAAIT,YAASuB,IAChD,wBAAMI,SAAS,iBAAiBF,QAAShB,EAAIN,kBAAeoB,IAC5D,wBAAMI,SAAS,WAAWF,QAAShB,EAAIR,QACvC,wBAAMuB,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,eACLC,SAASpB,SAAA,UAAAA,EAAMM,oBAAN,eAAoBiB,uBAAmBL,IAElD,wBAAMC,KAAK,gBAAgBC,QAAShB,EAAIT,YAASuB,IACjD,wBAAMC,KAAK,sBAAsBC,QAAShB,EAAIN,kBAAeoB,IAC7D,wBAAMC,KAAK,gBAAgBC,QAAShB,EAAIR,QAnB5C,C,6ECDF,UAzBuB,EAAG4B,UAEtB,gCACE,gBAAC,IAAD,CAAK7B,MAAK,YACV,2BACE,uCACA,0BACG6B,EAAKC,aAAaC,MAAMC,KAAKC,GAC5B,sBAAIC,IAAKD,EAAUE,IACjB,0BAAKF,EAAUG,QACf,0BACGH,EAAUI,aAAaL,KAAKM,GAC3B,sBAAIJ,IAAKI,EAAYH,IAAKG,EAAYC,OAAOf,aAMvD,0DACA,gBAAC,KAAD,CAAMgB,GAAG,KAAT,c","file":"component---src-pages-portfolios-tsx-276109c7a58caf14c32c.js","sourcesContent":["import { SeoQuery } from '@gql'\nimport { useLocation } from '@reach/router'\nimport { graphql, useStaticQuery } from 'gatsby'\nimport * as React from 'react'\nimport { useMemo } from 'react'\nimport { Helmet } from 'react-helmet'\n\ntype SEOProps = {\n  title: string\n  description?: string\n  lang?: string\n  image?: string\n  keywords?: (string | undefined | null)[] | undefined | null\n}\n\nexport const SEO = ({\n  title,\n  image,\n  lang,\n  description,\n  keywords,\n}: SEOProps): JSX.Element => {\n  const { site } = useStaticQuery<SeoQuery>(graphql`\n    query SEO {\n      site {\n        siteMetadata {\n          defaultTitle: title\n          titleTemplate\n          defaultDescription: description\n          siteUrl: url\n          defaultImage: image\n          twitterUsername\n          keywords\n        }\n      }\n    }\n  `)\n  const { pathname } = useLocation()\n\n  const seo = useMemo(\n    () => ({\n      title: title,\n      description: description || site?.siteMetadata?.defaultDescription,\n      image: `${site?.siteMetadata?.siteUrl}${\n        image || site?.siteMetadata?.defaultImage\n      }?${Math.random().toFixed(5)}`,\n      lang: lang || 'ja',\n      url: `${site?.siteMetadata?.siteUrl}${pathname}`,\n      keywords: (site?.siteMetadata?.keywords || []).concat(\n        keywords?.filter?.((v): v is string => !!v) || []\n      ),\n    }),\n    [site, title, description, image, lang, keywords, pathname]\n  )\n  return (\n    <Helmet titleTemplate={site?.siteMetadata?.titleTemplate || undefined}>\n      <title>{seo.title}</title>\n      <html lang={seo.lang} />\n      <meta name=\"description\" content={seo.description || undefined} />\n      <meta name=\"image\" content={seo.image} />\n      <meta name=\"keywords\" content={seo.keywords.join(',')} />\n      <meta property=\"og:url\" content={seo.url} />\n      <meta property=\"og:type\" content=\"article\" />\n      <meta property=\"og:title\" content={seo.title || undefined} />\n      <meta property=\"og:description\" content={seo.description || undefined} />\n      <meta property=\"og:image\" content={seo.image} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:site\"\n        content={site?.siteMetadata?.twitterUsername || undefined}\n      />\n      <meta name=\"twitter:title\" content={seo.title || undefined} />\n      <meta name=\"twitter:description\" content={seo.description || undefined} />\n      <meta name=\"twitter:image\" content={seo.image} />\n    </Helmet>\n  )\n}\n","import { SEO } from '@/components/organisms/SEO'\nimport { PortfoliosPageQuery } from '@gql'\nimport { graphql } from 'gatsby'\nimport Link from 'gatsby-link'\nimport * as React from 'react'\n\nexport const pageQuery = graphql`\n  query PortfoliosPage {\n    allPortfolio {\n      nodes {\n        id\n        name\n        nameJa\n        contributors {\n          id\n          member {\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\ninterface PortfoliosPageProps {\n  data: PortfoliosPageQuery\n}\n\nconst PortfoliosPage = ({ data }: PortfoliosPageProps): JSX.Element => {\n  return (\n    <>\n      <SEO title={`ポートフォリオ`} />\n      <div>\n        <h1>ポートフォリオ一覧</h1>\n        <ul>\n          {data.allPortfolio.nodes.map((portfolio) => (\n            <li key={portfolio.id}>\n              <h2>{portfolio.nameJa}</h2>\n              <ul>\n                {portfolio.contributors.map((contributor) => (\n                  <li key={contributor.id}>{contributor.member.name}</li>\n                ))}\n              </ul>\n            </li>\n          ))}\n        </ul>\n        <p>Now go build something great.</p>\n        <Link to=\"/\">Go to Top</Link>\n      </div>\n    </>\n  )\n}\n\nexport default PortfoliosPage\n"],"sourceRoot":""}